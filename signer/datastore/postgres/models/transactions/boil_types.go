// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package transactions

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("transactions: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type NetworkType string

// Enum values for NetworkType
const (
	NetworkTypeMainnet NetworkType = "mainnet"
	NetworkTypeTestnet NetworkType = "testnet"
)

func AllNetworkType() []NetworkType {
	return []NetworkType{
		NetworkTypeMainnet,
		NetworkTypeTestnet,
	}
}

func (e NetworkType) IsValid() error {
	switch e {
	case NetworkTypeMainnet, NetworkTypeTestnet:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e NetworkType) String() string {
	return string(e)
}

type State string

// Enum values for State
const (
	StateInitiated State = "initiated"
	StateCreated   State = "created"
	StateSigned    State = "signed"
	StateSubmitted State = "submitted"
	StateSettled   State = "settled"
	StateFinalized State = "finalized"
	StateErred     State = "erred"
)

func AllState() []State {
	return []State{
		StateInitiated,
		StateCreated,
		StateSigned,
		StateSubmitted,
		StateSettled,
		StateFinalized,
		StateErred,
	}
}

func (e State) IsValid() error {
	switch e {
	case StateInitiated, StateCreated, StateSigned, StateSubmitted, StateSettled, StateFinalized, StateErred:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e State) String() string {
	return string(e)
}

type TransferType string

// Enum values for TransferType
const (
	TransferTypeEoa           TransferType = "eoa"
	TransferTypeSmartContract TransferType = "smart_contract"
)

func AllTransferType() []TransferType {
	return []TransferType{
		TransferTypeEoa,
		TransferTypeSmartContract,
	}
}

func (e TransferType) IsValid() error {
	switch e {
	case TransferTypeEoa, TransferTypeSmartContract:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e TransferType) String() string {
	return string(e)
}
