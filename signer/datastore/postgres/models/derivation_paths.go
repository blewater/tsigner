// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package wallets

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DerivationPath is an object representing the database table.
type DerivationPath struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	WalletID     null.Int  `boil:"wallet_id" json:"wallet_id,omitempty" toml:"wallet_id" yaml:"wallet_id,omitempty"`
	Purpose      int       `boil:"purpose" json:"purpose" toml:"purpose" yaml:"purpose"`
	CoinType     int       `boil:"coin_type" json:"coin_type" toml:"coin_type" yaml:"coin_type"`
	Account      int       `boil:"account" json:"account" toml:"account" yaml:"account"`
	Change       int       `boil:"change" json:"change" toml:"change" yaml:"change"`
	AddressIndex int       `boil:"address_index" json:"address_index" toml:"address_index" yaml:"address_index"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Updated      time.Time `boil:"updated" json:"updated" toml:"updated" yaml:"updated"`

	R *derivationPathR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L derivationPathL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DerivationPathColumns = struct {
	ID           string
	WalletID     string
	Purpose      string
	CoinType     string
	Account      string
	Change       string
	AddressIndex string
	Created      string
	Updated      string
}{
	ID:           "id",
	WalletID:     "wallet_id",
	Purpose:      "purpose",
	CoinType:     "coin_type",
	Account:      "account",
	Change:       "change",
	AddressIndex: "address_index",
	Created:      "created",
	Updated:      "updated",
}

var DerivationPathTableColumns = struct {
	ID           string
	WalletID     string
	Purpose      string
	CoinType     string
	Account      string
	Change       string
	AddressIndex string
	Created      string
	Updated      string
}{
	ID:           "derivation_paths.id",
	WalletID:     "derivation_paths.wallet_id",
	Purpose:      "derivation_paths.purpose",
	CoinType:     "derivation_paths.coin_type",
	Account:      "derivation_paths.account",
	Change:       "derivation_paths.change",
	AddressIndex: "derivation_paths.address_index",
	Created:      "derivation_paths.created",
	Updated:      "derivation_paths.updated",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DerivationPathWhere = struct {
	ID           whereHelperint
	WalletID     whereHelpernull_Int
	Purpose      whereHelperint
	CoinType     whereHelperint
	Account      whereHelperint
	Change       whereHelperint
	AddressIndex whereHelperint
	Created      whereHelpertime_Time
	Updated      whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"derivation_paths\".\"id\""},
	WalletID:     whereHelpernull_Int{field: "\"derivation_paths\".\"wallet_id\""},
	Purpose:      whereHelperint{field: "\"derivation_paths\".\"purpose\""},
	CoinType:     whereHelperint{field: "\"derivation_paths\".\"coin_type\""},
	Account:      whereHelperint{field: "\"derivation_paths\".\"account\""},
	Change:       whereHelperint{field: "\"derivation_paths\".\"change\""},
	AddressIndex: whereHelperint{field: "\"derivation_paths\".\"address_index\""},
	Created:      whereHelpertime_Time{field: "\"derivation_paths\".\"created\""},
	Updated:      whereHelpertime_Time{field: "\"derivation_paths\".\"updated\""},
}

// DerivationPathRels is where relationship names are stored.
var DerivationPathRels = struct {
	Wallet string
}{
	Wallet: "Wallet",
}

// derivationPathR is where relationships are stored.
type derivationPathR struct {
	Wallet *SenderWallet `boil:"Wallet" json:"Wallet" toml:"Wallet" yaml:"Wallet"`
}

// NewStruct creates a new relationship struct
func (*derivationPathR) NewStruct() *derivationPathR {
	return &derivationPathR{}
}

func (r *derivationPathR) GetWallet() *SenderWallet {
	if r == nil {
		return nil
	}
	return r.Wallet
}

// derivationPathL is where Load methods for each relationship are stored.
type derivationPathL struct{}

var (
	derivationPathAllColumns            = []string{"id", "wallet_id", "purpose", "coin_type", "account", "change", "address_index", "created", "updated"}
	derivationPathColumnsWithoutDefault = []string{"purpose", "coin_type", "account", "change", "address_index"}
	derivationPathColumnsWithDefault    = []string{"id", "wallet_id", "created", "updated"}
	derivationPathPrimaryKeyColumns     = []string{"id"}
	derivationPathGeneratedColumns      = []string{}
)

type (
	// DerivationPathSlice is an alias for a slice of pointers to DerivationPath.
	// This should almost always be used instead of []DerivationPath.
	DerivationPathSlice []*DerivationPath
	// DerivationPathHook is the signature for custom DerivationPath hook methods
	DerivationPathHook func(context.Context, boil.ContextExecutor, *DerivationPath) error

	derivationPathQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	derivationPathType                 = reflect.TypeOf(&DerivationPath{})
	derivationPathMapping              = queries.MakeStructMapping(derivationPathType)
	derivationPathPrimaryKeyMapping, _ = queries.BindMapping(derivationPathType, derivationPathMapping, derivationPathPrimaryKeyColumns)
	derivationPathInsertCacheMut       sync.RWMutex
	derivationPathInsertCache          = make(map[string]insertCache)
	derivationPathUpdateCacheMut       sync.RWMutex
	derivationPathUpdateCache          = make(map[string]updateCache)
	derivationPathUpsertCacheMut       sync.RWMutex
	derivationPathUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var derivationPathAfterSelectHooks []DerivationPathHook

var derivationPathBeforeInsertHooks []DerivationPathHook
var derivationPathAfterInsertHooks []DerivationPathHook

var derivationPathBeforeUpdateHooks []DerivationPathHook
var derivationPathAfterUpdateHooks []DerivationPathHook

var derivationPathBeforeDeleteHooks []DerivationPathHook
var derivationPathAfterDeleteHooks []DerivationPathHook

var derivationPathBeforeUpsertHooks []DerivationPathHook
var derivationPathAfterUpsertHooks []DerivationPathHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DerivationPath) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DerivationPath) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DerivationPath) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DerivationPath) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DerivationPath) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DerivationPath) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DerivationPath) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DerivationPath) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DerivationPath) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivationPathAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDerivationPathHook registers your hook function for all future operations.
func AddDerivationPathHook(hookPoint boil.HookPoint, derivationPathHook DerivationPathHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		derivationPathAfterSelectHooks = append(derivationPathAfterSelectHooks, derivationPathHook)
	case boil.BeforeInsertHook:
		derivationPathBeforeInsertHooks = append(derivationPathBeforeInsertHooks, derivationPathHook)
	case boil.AfterInsertHook:
		derivationPathAfterInsertHooks = append(derivationPathAfterInsertHooks, derivationPathHook)
	case boil.BeforeUpdateHook:
		derivationPathBeforeUpdateHooks = append(derivationPathBeforeUpdateHooks, derivationPathHook)
	case boil.AfterUpdateHook:
		derivationPathAfterUpdateHooks = append(derivationPathAfterUpdateHooks, derivationPathHook)
	case boil.BeforeDeleteHook:
		derivationPathBeforeDeleteHooks = append(derivationPathBeforeDeleteHooks, derivationPathHook)
	case boil.AfterDeleteHook:
		derivationPathAfterDeleteHooks = append(derivationPathAfterDeleteHooks, derivationPathHook)
	case boil.BeforeUpsertHook:
		derivationPathBeforeUpsertHooks = append(derivationPathBeforeUpsertHooks, derivationPathHook)
	case boil.AfterUpsertHook:
		derivationPathAfterUpsertHooks = append(derivationPathAfterUpsertHooks, derivationPathHook)
	}
}

// OneG returns a single derivationPath record from the query using the global executor.
func (q derivationPathQuery) OneG(ctx context.Context) (*DerivationPath, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single derivationPath record from the query.
func (q derivationPathQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DerivationPath, error) {
	o := &DerivationPath{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "wallets: failed to execute a one query for derivation_paths")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DerivationPath records from the query using the global executor.
func (q derivationPathQuery) AllG(ctx context.Context) (DerivationPathSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DerivationPath records from the query.
func (q derivationPathQuery) All(ctx context.Context, exec boil.ContextExecutor) (DerivationPathSlice, error) {
	var o []*DerivationPath

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "wallets: failed to assign all query results to DerivationPath slice")
	}

	if len(derivationPathAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DerivationPath records in the query using the global executor
func (q derivationPathQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DerivationPath records in the query.
func (q derivationPathQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to count derivation_paths rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q derivationPathQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q derivationPathQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "wallets: failed to check if derivation_paths exists")
	}

	return count > 0, nil
}

// Wallet pointed to by the foreign key.
func (o *DerivationPath) Wallet(mods ...qm.QueryMod) senderWalletQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WalletID),
	}

	queryMods = append(queryMods, mods...)

	return SenderWallets(queryMods...)
}

// LoadWallet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (derivationPathL) LoadWallet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDerivationPath interface{}, mods queries.Applicator) error {
	var slice []*DerivationPath
	var object *DerivationPath

	if singular {
		var ok bool
		object, ok = maybeDerivationPath.(*DerivationPath)
		if !ok {
			object = new(DerivationPath)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDerivationPath)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDerivationPath))
			}
		}
	} else {
		s, ok := maybeDerivationPath.(*[]*DerivationPath)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDerivationPath)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDerivationPath))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &derivationPathR{}
		}
		if !queries.IsNil(object.WalletID) {
			args = append(args, object.WalletID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &derivationPathR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WalletID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WalletID) {
				args = append(args, obj.WalletID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sender_wallets`),
		qm.WhereIn(`sender_wallets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SenderWallet")
	}

	var resultSlice []*SenderWallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SenderWallet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sender_wallets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sender_wallets")
	}

	if len(senderWalletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Wallet = foreign
		if foreign.R == nil {
			foreign.R = &senderWalletR{}
		}
		foreign.R.WalletDerivationPaths = append(foreign.R.WalletDerivationPaths, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WalletID, foreign.ID) {
				local.R.Wallet = foreign
				if foreign.R == nil {
					foreign.R = &senderWalletR{}
				}
				foreign.R.WalletDerivationPaths = append(foreign.R.WalletDerivationPaths, local)
				break
			}
		}
	}

	return nil
}

// SetWalletG of the derivationPath to the related item.
// Sets o.R.Wallet to related.
// Adds o to related.R.WalletDerivationPaths.
// Uses the global database handle.
func (o *DerivationPath) SetWalletG(ctx context.Context, insert bool, related *SenderWallet) error {
	return o.SetWallet(ctx, boil.GetContextDB(), insert, related)
}

// SetWallet of the derivationPath to the related item.
// Sets o.R.Wallet to related.
// Adds o to related.R.WalletDerivationPaths.
func (o *DerivationPath) SetWallet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SenderWallet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"derivation_paths\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"wallet_id"}),
		strmangle.WhereClause("\"", "\"", 2, derivationPathPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WalletID, related.ID)
	if o.R == nil {
		o.R = &derivationPathR{
			Wallet: related,
		}
	} else {
		o.R.Wallet = related
	}

	if related.R == nil {
		related.R = &senderWalletR{
			WalletDerivationPaths: DerivationPathSlice{o},
		}
	} else {
		related.R.WalletDerivationPaths = append(related.R.WalletDerivationPaths, o)
	}

	return nil
}

// RemoveWalletG relationship.
// Sets o.R.Wallet to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *DerivationPath) RemoveWalletG(ctx context.Context, related *SenderWallet) error {
	return o.RemoveWallet(ctx, boil.GetContextDB(), related)
}

// RemoveWallet relationship.
// Sets o.R.Wallet to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DerivationPath) RemoveWallet(ctx context.Context, exec boil.ContextExecutor, related *SenderWallet) error {
	var err error

	queries.SetScanner(&o.WalletID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("wallet_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Wallet = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WalletDerivationPaths {
		if queries.Equal(o.WalletID, ri.WalletID) {
			continue
		}

		ln := len(related.R.WalletDerivationPaths)
		if ln > 1 && i < ln-1 {
			related.R.WalletDerivationPaths[i] = related.R.WalletDerivationPaths[ln-1]
		}
		related.R.WalletDerivationPaths = related.R.WalletDerivationPaths[:ln-1]
		break
	}
	return nil
}

// DerivationPaths retrieves all the records using an executor.
func DerivationPaths(mods ...qm.QueryMod) derivationPathQuery {
	mods = append(mods, qm.From("\"derivation_paths\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"derivation_paths\".*"})
	}

	return derivationPathQuery{q}
}

// FindDerivationPathG retrieves a single record by ID.
func FindDerivationPathG(ctx context.Context, iD int, selectCols ...string) (*DerivationPath, error) {
	return FindDerivationPath(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDerivationPath retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDerivationPath(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DerivationPath, error) {
	derivationPathObj := &DerivationPath{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"derivation_paths\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, derivationPathObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "wallets: unable to select from derivation_paths")
	}

	if err = derivationPathObj.doAfterSelectHooks(ctx, exec); err != nil {
		return derivationPathObj, err
	}

	return derivationPathObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DerivationPath) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DerivationPath) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("wallets: no derivation_paths provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.Created.IsZero() {
			o.Created = currTime
		}
		if o.Updated.IsZero() {
			o.Updated = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(derivationPathColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	derivationPathInsertCacheMut.RLock()
	cache, cached := derivationPathInsertCache[key]
	derivationPathInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			derivationPathAllColumns,
			derivationPathColumnsWithDefault,
			derivationPathColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(derivationPathType, derivationPathMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(derivationPathType, derivationPathMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"derivation_paths\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"derivation_paths\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "wallets: unable to insert into derivation_paths")
	}

	if !cached {
		derivationPathInsertCacheMut.Lock()
		derivationPathInsertCache[key] = cache
		derivationPathInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DerivationPath record using the global executor.
// See Update for more documentation.
func (o *DerivationPath) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DerivationPath.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DerivationPath) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.Updated = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	derivationPathUpdateCacheMut.RLock()
	cache, cached := derivationPathUpdateCache[key]
	derivationPathUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			derivationPathAllColumns,
			derivationPathPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("wallets: unable to update derivation_paths, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"derivation_paths\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, derivationPathPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(derivationPathType, derivationPathMapping, append(wl, derivationPathPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to update derivation_paths row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by update for derivation_paths")
	}

	if !cached {
		derivationPathUpdateCacheMut.Lock()
		derivationPathUpdateCache[key] = cache
		derivationPathUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q derivationPathQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q derivationPathQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to update all for derivation_paths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to retrieve rows affected for derivation_paths")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DerivationPathSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DerivationPathSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("wallets: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), derivationPathPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"derivation_paths\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, derivationPathPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to update all in derivationPath slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to retrieve rows affected all in update all derivationPath")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DerivationPath) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DerivationPath) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("wallets: no derivation_paths provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.Created.IsZero() {
			o.Created = currTime
		}
		o.Updated = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(derivationPathColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	derivationPathUpsertCacheMut.RLock()
	cache, cached := derivationPathUpsertCache[key]
	derivationPathUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			derivationPathAllColumns,
			derivationPathColumnsWithDefault,
			derivationPathColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			derivationPathAllColumns,
			derivationPathPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("wallets: unable to upsert derivation_paths, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(derivationPathPrimaryKeyColumns))
			copy(conflict, derivationPathPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"derivation_paths\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(derivationPathType, derivationPathMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(derivationPathType, derivationPathMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "wallets: unable to upsert derivation_paths")
	}

	if !cached {
		derivationPathUpsertCacheMut.Lock()
		derivationPathUpsertCache[key] = cache
		derivationPathUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DerivationPath record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DerivationPath) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DerivationPath record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DerivationPath) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("wallets: no DerivationPath provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), derivationPathPrimaryKeyMapping)
	sql := "DELETE FROM \"derivation_paths\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to delete from derivation_paths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by delete for derivation_paths")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q derivationPathQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q derivationPathQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("wallets: no derivationPathQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to delete all from derivation_paths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by deleteall for derivation_paths")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DerivationPathSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DerivationPathSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(derivationPathBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), derivationPathPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"derivation_paths\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, derivationPathPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to delete all from derivationPath slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by deleteall for derivation_paths")
	}

	if len(derivationPathAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DerivationPath) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("wallets: no DerivationPath provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DerivationPath) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDerivationPath(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DerivationPathSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("wallets: empty DerivationPathSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DerivationPathSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DerivationPathSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), derivationPathPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"derivation_paths\".* FROM \"derivation_paths\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, derivationPathPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "wallets: unable to reload all in DerivationPathSlice")
	}

	*o = slice

	return nil
}

// DerivationPathExistsG checks if the DerivationPath row exists.
func DerivationPathExistsG(ctx context.Context, iD int) (bool, error) {
	return DerivationPathExists(ctx, boil.GetContextDB(), iD)
}

// DerivationPathExists checks if the DerivationPath row exists.
func DerivationPathExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"derivation_paths\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "wallets: unable to check if derivation_paths exists")
	}

	return exists, nil
}

// Exists checks if the DerivationPath row exists.
func (o *DerivationPath) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DerivationPathExists(ctx, exec, o.ID)
}
