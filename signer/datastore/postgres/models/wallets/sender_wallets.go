// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package wallets

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SenderWallet is an object representing the database table.
type SenderWallet struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID            null.Int    `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Address           string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	AddressType       AddressType `boil:"address_type" json:"address_type" toml:"address_type" yaml:"address_type"`
	ChainID           int         `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	NetworkType       NetworkType `boil:"network_type" json:"network_type" toml:"network_type" yaml:"network_type"`
	KeyID             string      `boil:"key_id" json:"key_id" toml:"key_id" yaml:"key_id"`
	IsMultisig        bool        `boil:"is_multisig" json:"is_multisig" toml:"is_multisig" yaml:"is_multisig"`
	MultisigThreshold null.Int    `boil:"multisig_threshold" json:"multisig_threshold,omitempty" toml:"multisig_threshold" yaml:"multisig_threshold,omitempty"`
	Created           time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Updated           time.Time   `boil:"updated" json:"updated" toml:"updated" yaml:"updated"`
	AddressIndex      int         `boil:"address_index" json:"address_index" toml:"address_index" yaml:"address_index"`

	R *senderWalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L senderWalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SenderWalletColumns = struct {
	ID                string
	UserID            string
	Address           string
	AddressType       string
	ChainID           string
	NetworkType       string
	KeyID             string
	IsMultisig        string
	MultisigThreshold string
	Created           string
	Updated           string
	AddressIndex      string
}{
	ID:                "id",
	UserID:            "user_id",
	Address:           "address",
	AddressType:       "address_type",
	ChainID:           "chain_id",
	NetworkType:       "network_type",
	KeyID:             "key_id",
	IsMultisig:        "is_multisig",
	MultisigThreshold: "multisig_threshold",
	Created:           "created",
	Updated:           "updated",
	AddressIndex:      "address_index",
}

var SenderWalletTableColumns = struct {
	ID                string
	UserID            string
	Address           string
	AddressType       string
	ChainID           string
	NetworkType       string
	KeyID             string
	IsMultisig        string
	MultisigThreshold string
	Created           string
	Updated           string
	AddressIndex      string
}{
	ID:                "sender_wallets.id",
	UserID:            "sender_wallets.user_id",
	Address:           "sender_wallets.address",
	AddressType:       "sender_wallets.address_type",
	ChainID:           "sender_wallets.chain_id",
	NetworkType:       "sender_wallets.network_type",
	KeyID:             "sender_wallets.key_id",
	IsMultisig:        "sender_wallets.is_multisig",
	MultisigThreshold: "sender_wallets.multisig_threshold",
	Created:           "sender_wallets.created",
	Updated:           "sender_wallets.updated",
	AddressIndex:      "sender_wallets.address_index",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperAddressType struct{ field string }

func (w whereHelperAddressType) EQ(x AddressType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAddressType) NEQ(x AddressType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAddressType) LT(x AddressType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAddressType) LTE(x AddressType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAddressType) GT(x AddressType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAddressType) GTE(x AddressType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAddressType) IN(slice []AddressType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAddressType) NIN(slice []AddressType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperNetworkType struct{ field string }

func (w whereHelperNetworkType) EQ(x NetworkType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperNetworkType) NEQ(x NetworkType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperNetworkType) LT(x NetworkType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNetworkType) LTE(x NetworkType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNetworkType) GT(x NetworkType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNetworkType) GTE(x NetworkType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNetworkType) IN(slice []NetworkType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNetworkType) NIN(slice []NetworkType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var SenderWalletWhere = struct {
	ID                whereHelperint
	UserID            whereHelpernull_Int
	Address           whereHelperstring
	AddressType       whereHelperAddressType
	ChainID           whereHelperint
	NetworkType       whereHelperNetworkType
	KeyID             whereHelperstring
	IsMultisig        whereHelperbool
	MultisigThreshold whereHelpernull_Int
	Created           whereHelpertime_Time
	Updated           whereHelpertime_Time
	AddressIndex      whereHelperint
}{
	ID:                whereHelperint{field: "\"sender_wallets\".\"id\""},
	UserID:            whereHelpernull_Int{field: "\"sender_wallets\".\"user_id\""},
	Address:           whereHelperstring{field: "\"sender_wallets\".\"address\""},
	AddressType:       whereHelperAddressType{field: "\"sender_wallets\".\"address_type\""},
	ChainID:           whereHelperint{field: "\"sender_wallets\".\"chain_id\""},
	NetworkType:       whereHelperNetworkType{field: "\"sender_wallets\".\"network_type\""},
	KeyID:             whereHelperstring{field: "\"sender_wallets\".\"key_id\""},
	IsMultisig:        whereHelperbool{field: "\"sender_wallets\".\"is_multisig\""},
	MultisigThreshold: whereHelpernull_Int{field: "\"sender_wallets\".\"multisig_threshold\""},
	Created:           whereHelpertime_Time{field: "\"sender_wallets\".\"created\""},
	Updated:           whereHelpertime_Time{field: "\"sender_wallets\".\"updated\""},
	AddressIndex:      whereHelperint{field: "\"sender_wallets\".\"address_index\""},
}

// SenderWalletRels is where relationship names are stored.
var SenderWalletRels = struct {
	User                  string
	WalletDerivationPaths string
}{
	User:                  "User",
	WalletDerivationPaths: "WalletDerivationPaths",
}

// senderWalletR is where relationships are stored.
type senderWalletR struct {
	User                  *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	WalletDerivationPaths DerivationPathSlice `boil:"WalletDerivationPaths" json:"WalletDerivationPaths" toml:"WalletDerivationPaths" yaml:"WalletDerivationPaths"`
}

// NewStruct creates a new relationship struct
func (*senderWalletR) NewStruct() *senderWalletR {
	return &senderWalletR{}
}

func (r *senderWalletR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *senderWalletR) GetWalletDerivationPaths() DerivationPathSlice {
	if r == nil {
		return nil
	}
	return r.WalletDerivationPaths
}

// senderWalletL is where Load methods for each relationship are stored.
type senderWalletL struct{}

var (
	senderWalletAllColumns            = []string{"id", "user_id", "address", "address_type", "chain_id", "network_type", "key_id", "is_multisig", "multisig_threshold", "created", "updated", "address_index"}
	senderWalletColumnsWithoutDefault = []string{"address", "address_type", "chain_id", "network_type", "key_id", "address_index"}
	senderWalletColumnsWithDefault    = []string{"id", "user_id", "is_multisig", "multisig_threshold", "created", "updated"}
	senderWalletPrimaryKeyColumns     = []string{"id"}
	senderWalletGeneratedColumns      = []string{}
)

type (
	// SenderWalletSlice is an alias for a slice of pointers to SenderWallet.
	// This should almost always be used instead of []SenderWallet.
	SenderWalletSlice []*SenderWallet
	// SenderWalletHook is the signature for custom SenderWallet hook methods
	SenderWalletHook func(context.Context, boil.ContextExecutor, *SenderWallet) error

	senderWalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	senderWalletType                 = reflect.TypeOf(&SenderWallet{})
	senderWalletMapping              = queries.MakeStructMapping(senderWalletType)
	senderWalletPrimaryKeyMapping, _ = queries.BindMapping(senderWalletType, senderWalletMapping, senderWalletPrimaryKeyColumns)
	senderWalletInsertCacheMut       sync.RWMutex
	senderWalletInsertCache          = make(map[string]insertCache)
	senderWalletUpdateCacheMut       sync.RWMutex
	senderWalletUpdateCache          = make(map[string]updateCache)
	senderWalletUpsertCacheMut       sync.RWMutex
	senderWalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var senderWalletAfterSelectHooks []SenderWalletHook

var senderWalletBeforeInsertHooks []SenderWalletHook
var senderWalletAfterInsertHooks []SenderWalletHook

var senderWalletBeforeUpdateHooks []SenderWalletHook
var senderWalletAfterUpdateHooks []SenderWalletHook

var senderWalletBeforeDeleteHooks []SenderWalletHook
var senderWalletAfterDeleteHooks []SenderWalletHook

var senderWalletBeforeUpsertHooks []SenderWalletHook
var senderWalletAfterUpsertHooks []SenderWalletHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SenderWallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SenderWallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SenderWallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SenderWallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SenderWallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SenderWallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SenderWallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SenderWallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SenderWallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderWalletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSenderWalletHook registers your hook function for all future operations.
func AddSenderWalletHook(hookPoint boil.HookPoint, senderWalletHook SenderWalletHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		senderWalletAfterSelectHooks = append(senderWalletAfterSelectHooks, senderWalletHook)
	case boil.BeforeInsertHook:
		senderWalletBeforeInsertHooks = append(senderWalletBeforeInsertHooks, senderWalletHook)
	case boil.AfterInsertHook:
		senderWalletAfterInsertHooks = append(senderWalletAfterInsertHooks, senderWalletHook)
	case boil.BeforeUpdateHook:
		senderWalletBeforeUpdateHooks = append(senderWalletBeforeUpdateHooks, senderWalletHook)
	case boil.AfterUpdateHook:
		senderWalletAfterUpdateHooks = append(senderWalletAfterUpdateHooks, senderWalletHook)
	case boil.BeforeDeleteHook:
		senderWalletBeforeDeleteHooks = append(senderWalletBeforeDeleteHooks, senderWalletHook)
	case boil.AfterDeleteHook:
		senderWalletAfterDeleteHooks = append(senderWalletAfterDeleteHooks, senderWalletHook)
	case boil.BeforeUpsertHook:
		senderWalletBeforeUpsertHooks = append(senderWalletBeforeUpsertHooks, senderWalletHook)
	case boil.AfterUpsertHook:
		senderWalletAfterUpsertHooks = append(senderWalletAfterUpsertHooks, senderWalletHook)
	}
}

// OneG returns a single senderWallet record from the query using the global executor.
func (q senderWalletQuery) OneG(ctx context.Context) (*SenderWallet, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single senderWallet record from the query.
func (q senderWalletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SenderWallet, error) {
	o := &SenderWallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "wallets: failed to execute a one query for sender_wallets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SenderWallet records from the query using the global executor.
func (q senderWalletQuery) AllG(ctx context.Context) (SenderWalletSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SenderWallet records from the query.
func (q senderWalletQuery) All(ctx context.Context, exec boil.ContextExecutor) (SenderWalletSlice, error) {
	var o []*SenderWallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "wallets: failed to assign all query results to SenderWallet slice")
	}

	if len(senderWalletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SenderWallet records in the query using the global executor
func (q senderWalletQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SenderWallet records in the query.
func (q senderWalletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to count sender_wallets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q senderWalletQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q senderWalletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "wallets: failed to check if sender_wallets exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *SenderWallet) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// WalletDerivationPaths retrieves all the derivation_path's DerivationPaths with an executor via wallet_id column.
func (o *SenderWallet) WalletDerivationPaths(mods ...qm.QueryMod) derivationPathQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"derivation_paths\".\"wallet_id\"=?", o.ID),
	)

	return DerivationPaths(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (senderWalletL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSenderWallet interface{}, mods queries.Applicator) error {
	var slice []*SenderWallet
	var object *SenderWallet

	if singular {
		var ok bool
		object, ok = maybeSenderWallet.(*SenderWallet)
		if !ok {
			object = new(SenderWallet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSenderWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSenderWallet))
			}
		}
	} else {
		s, ok := maybeSenderWallet.(*[]*SenderWallet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSenderWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSenderWallet))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &senderWalletR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &senderWalletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SenderWallets = append(foreign.R.SenderWallets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SenderWallets = append(foreign.R.SenderWallets, local)
				break
			}
		}
	}

	return nil
}

// LoadWalletDerivationPaths allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (senderWalletL) LoadWalletDerivationPaths(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSenderWallet interface{}, mods queries.Applicator) error {
	var slice []*SenderWallet
	var object *SenderWallet

	if singular {
		var ok bool
		object, ok = maybeSenderWallet.(*SenderWallet)
		if !ok {
			object = new(SenderWallet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSenderWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSenderWallet))
			}
		}
	} else {
		s, ok := maybeSenderWallet.(*[]*SenderWallet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSenderWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSenderWallet))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &senderWalletR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &senderWalletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`derivation_paths`),
		qm.WhereIn(`derivation_paths.wallet_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load derivation_paths")
	}

	var resultSlice []*DerivationPath
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice derivation_paths")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on derivation_paths")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for derivation_paths")
	}

	if len(derivationPathAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WalletDerivationPaths = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &derivationPathR{}
			}
			foreign.R.Wallet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WalletID) {
				local.R.WalletDerivationPaths = append(local.R.WalletDerivationPaths, foreign)
				if foreign.R == nil {
					foreign.R = &derivationPathR{}
				}
				foreign.R.Wallet = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the senderWallet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SenderWallets.
// Uses the global database handle.
func (o *SenderWallet) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the senderWallet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SenderWallets.
func (o *SenderWallet) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sender_wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, senderWalletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &senderWalletR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			SenderWallets: SenderWalletSlice{o},
		}
	} else {
		related.R.SenderWallets = append(related.R.SenderWallets, o)
	}

	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *SenderWallet) RemoveUserG(ctx context.Context, related *User) error {
	return o.RemoveUser(ctx, boil.GetContextDB(), related)
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SenderWallet) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SenderWallets {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.SenderWallets)
		if ln > 1 && i < ln-1 {
			related.R.SenderWallets[i] = related.R.SenderWallets[ln-1]
		}
		related.R.SenderWallets = related.R.SenderWallets[:ln-1]
		break
	}
	return nil
}

// AddWalletDerivationPathsG adds the given related objects to the existing relationships
// of the sender_wallet, optionally inserting them as new records.
// Appends related to o.R.WalletDerivationPaths.
// Sets related.R.Wallet appropriately.
// Uses the global database handle.
func (o *SenderWallet) AddWalletDerivationPathsG(ctx context.Context, insert bool, related ...*DerivationPath) error {
	return o.AddWalletDerivationPaths(ctx, boil.GetContextDB(), insert, related...)
}

// AddWalletDerivationPaths adds the given related objects to the existing relationships
// of the sender_wallet, optionally inserting them as new records.
// Appends related to o.R.WalletDerivationPaths.
// Sets related.R.Wallet appropriately.
func (o *SenderWallet) AddWalletDerivationPaths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DerivationPath) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WalletID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"derivation_paths\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"wallet_id"}),
				strmangle.WhereClause("\"", "\"", 2, derivationPathPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WalletID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &senderWalletR{
			WalletDerivationPaths: related,
		}
	} else {
		o.R.WalletDerivationPaths = append(o.R.WalletDerivationPaths, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &derivationPathR{
				Wallet: o,
			}
		} else {
			rel.R.Wallet = o
		}
	}
	return nil
}

// SetWalletDerivationPathsG removes all previously related items of the
// sender_wallet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Wallet's WalletDerivationPaths accordingly.
// Replaces o.R.WalletDerivationPaths with related.
// Sets related.R.Wallet's WalletDerivationPaths accordingly.
// Uses the global database handle.
func (o *SenderWallet) SetWalletDerivationPathsG(ctx context.Context, insert bool, related ...*DerivationPath) error {
	return o.SetWalletDerivationPaths(ctx, boil.GetContextDB(), insert, related...)
}

// SetWalletDerivationPaths removes all previously related items of the
// sender_wallet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Wallet's WalletDerivationPaths accordingly.
// Replaces o.R.WalletDerivationPaths with related.
// Sets related.R.Wallet's WalletDerivationPaths accordingly.
func (o *SenderWallet) SetWalletDerivationPaths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DerivationPath) error {
	query := "update \"derivation_paths\" set \"wallet_id\" = null where \"wallet_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WalletDerivationPaths {
			queries.SetScanner(&rel.WalletID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Wallet = nil
		}
		o.R.WalletDerivationPaths = nil
	}

	return o.AddWalletDerivationPaths(ctx, exec, insert, related...)
}

// RemoveWalletDerivationPathsG relationships from objects passed in.
// Removes related items from R.WalletDerivationPaths (uses pointer comparison, removal does not keep order)
// Sets related.R.Wallet.
// Uses the global database handle.
func (o *SenderWallet) RemoveWalletDerivationPathsG(ctx context.Context, related ...*DerivationPath) error {
	return o.RemoveWalletDerivationPaths(ctx, boil.GetContextDB(), related...)
}

// RemoveWalletDerivationPaths relationships from objects passed in.
// Removes related items from R.WalletDerivationPaths (uses pointer comparison, removal does not keep order)
// Sets related.R.Wallet.
func (o *SenderWallet) RemoveWalletDerivationPaths(ctx context.Context, exec boil.ContextExecutor, related ...*DerivationPath) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WalletID, nil)
		if rel.R != nil {
			rel.R.Wallet = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("wallet_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WalletDerivationPaths {
			if rel != ri {
				continue
			}

			ln := len(o.R.WalletDerivationPaths)
			if ln > 1 && i < ln-1 {
				o.R.WalletDerivationPaths[i] = o.R.WalletDerivationPaths[ln-1]
			}
			o.R.WalletDerivationPaths = o.R.WalletDerivationPaths[:ln-1]
			break
		}
	}

	return nil
}

// SenderWallets retrieves all the records using an executor.
func SenderWallets(mods ...qm.QueryMod) senderWalletQuery {
	mods = append(mods, qm.From("\"sender_wallets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sender_wallets\".*"})
	}

	return senderWalletQuery{q}
}

// FindSenderWalletG retrieves a single record by ID.
func FindSenderWalletG(ctx context.Context, iD int, selectCols ...string) (*SenderWallet, error) {
	return FindSenderWallet(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSenderWallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSenderWallet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SenderWallet, error) {
	senderWalletObj := &SenderWallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sender_wallets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, senderWalletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "wallets: unable to select from sender_wallets")
	}

	if err = senderWalletObj.doAfterSelectHooks(ctx, exec); err != nil {
		return senderWalletObj, err
	}

	return senderWalletObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SenderWallet) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SenderWallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("wallets: no sender_wallets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.Created.IsZero() {
			o.Created = currTime
		}
		if o.Updated.IsZero() {
			o.Updated = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(senderWalletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	senderWalletInsertCacheMut.RLock()
	cache, cached := senderWalletInsertCache[key]
	senderWalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			senderWalletAllColumns,
			senderWalletColumnsWithDefault,
			senderWalletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(senderWalletType, senderWalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(senderWalletType, senderWalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sender_wallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sender_wallets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "wallets: unable to insert into sender_wallets")
	}

	if !cached {
		senderWalletInsertCacheMut.Lock()
		senderWalletInsertCache[key] = cache
		senderWalletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SenderWallet record using the global executor.
// See Update for more documentation.
func (o *SenderWallet) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SenderWallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SenderWallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.Updated = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	senderWalletUpdateCacheMut.RLock()
	cache, cached := senderWalletUpdateCache[key]
	senderWalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			senderWalletAllColumns,
			senderWalletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("wallets: unable to update sender_wallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sender_wallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, senderWalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(senderWalletType, senderWalletMapping, append(wl, senderWalletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to update sender_wallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by update for sender_wallets")
	}

	if !cached {
		senderWalletUpdateCacheMut.Lock()
		senderWalletUpdateCache[key] = cache
		senderWalletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q senderWalletQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q senderWalletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to update all for sender_wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to retrieve rows affected for sender_wallets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SenderWalletSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SenderWalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("wallets: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), senderWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sender_wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, senderWalletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to update all in senderWallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to retrieve rows affected all in update all senderWallet")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SenderWallet) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SenderWallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("wallets: no sender_wallets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.Created.IsZero() {
			o.Created = currTime
		}
		o.Updated = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(senderWalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	senderWalletUpsertCacheMut.RLock()
	cache, cached := senderWalletUpsertCache[key]
	senderWalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			senderWalletAllColumns,
			senderWalletColumnsWithDefault,
			senderWalletColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			senderWalletAllColumns,
			senderWalletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("wallets: unable to upsert sender_wallets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(senderWalletPrimaryKeyColumns))
			copy(conflict, senderWalletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sender_wallets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(senderWalletType, senderWalletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(senderWalletType, senderWalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "wallets: unable to upsert sender_wallets")
	}

	if !cached {
		senderWalletUpsertCacheMut.Lock()
		senderWalletUpsertCache[key] = cache
		senderWalletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SenderWallet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SenderWallet) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SenderWallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SenderWallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("wallets: no SenderWallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), senderWalletPrimaryKeyMapping)
	sql := "DELETE FROM \"sender_wallets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to delete from sender_wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by delete for sender_wallets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q senderWalletQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q senderWalletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("wallets: no senderWalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to delete all from sender_wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by deleteall for sender_wallets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SenderWalletSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SenderWalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(senderWalletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), senderWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sender_wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, senderWalletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "wallets: unable to delete all from senderWallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "wallets: failed to get rows affected by deleteall for sender_wallets")
	}

	if len(senderWalletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SenderWallet) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("wallets: no SenderWallet provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SenderWallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSenderWallet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SenderWalletSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("wallets: empty SenderWalletSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SenderWalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SenderWalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), senderWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sender_wallets\".* FROM \"sender_wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, senderWalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "wallets: unable to reload all in SenderWalletSlice")
	}

	*o = slice

	return nil
}

// SenderWalletExistsG checks if the SenderWallet row exists.
func SenderWalletExistsG(ctx context.Context, iD int) (bool, error) {
	return SenderWalletExists(ctx, boil.GetContextDB(), iD)
}

// SenderWalletExists checks if the SenderWallet row exists.
func SenderWalletExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sender_wallets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "wallets: unable to check if sender_wallets exists")
	}

	return exists, nil
}

// Exists checks if the SenderWallet row exists.
func (o *SenderWallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SenderWalletExists(ctx, exec, o.ID)
}
